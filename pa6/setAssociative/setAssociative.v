input [2:0]  read_address;

input        set_0_line_0_valid;
input        set_0_line_0_tag;
input [15:0] set_0_line_0_block;

input        set_0_line_1_valid;
input        set_0_line_1_tag;
input [15:0] set_0_line_1_block;

input        set_1_line_0_valid;
input        set_1_line_0_tag;
input [15:0] set_1_line_0_block;

input        set_1_line_1_valid;
input        set_1_line_1_tag;
input [15:0] set_1_line_1_block;

output       read_hit;
output [7:0] read_byte;

wire first;
wire second;
wire third;
wire fourth;
wire true;
wire false;
wire tag;
wire set;
wire offset;
wire offset_valid_match;
wire zeros_match;
wire zeroone_match;
wire onezero_match;
wire ones_match;
wire zeros_valid_match;
wire zeroone_valid_match;
wire onezero_valid_match;
wire ones_valid_match;
wire vaild_matches;

assign tag = read_address[2];
assign set = read_address[1];
assign offset = read_address[0];
assign true = tag ~^ tag;
assign false = ~ true;
assign first = set ^ true;
assign second = tag ~^ set_0_line_0_tag;
assign zeros_match = first & second;
assign zeros_match = zeros_match & set_0_line_0_valid;
assign first = set ^ true;
assign second = tag ~^ set_0_line_1_tag;
assign zeroone_match = first & second;
assign zeroone_match = zeroone_match & set_0_line_1_valid;
assign first = set ^ false;
assign second = tag ~^ set_1_line_0_tag;
assign onezero_match = first & second;
assign onezero_match = onezero_match & set_1_line_0_valid;
assign first = set ^ false;
assign second = tag ~^ set_1_line_1_tag;
assign ones_match = first & second;
assign ones_match = ones_match & set_1_line_1_valid;
assign read_hit = zeros_match;
assign read_hit = read_hit | zeroone_match;
assign read_hit = read_hit | ones_match;
assign zeros_valid_match = ~ zeros_match;
assign read_hit = read_hit | onezero_match;
assign zeroone_valid_match = ~ zeroone_match;
assign onezero_valid_match = ~ onezero_match;
assign ones_valid_match = ~ ones_match;
assign read_byte[0] = true;
assign read_byte[1] = true;
assign read_byte[2] = true;
assign read_byte[3] = true;
assign read_byte[4] = true;
assign read_byte[5] = true;
assign read_byte[6] = true;
assign read_byte[7] = true;
assign read_byte[0] = ~ read_byte[0];
assign read_byte[1] = ~ read_byte[1];
assign read_byte[2] = ~ read_byte[2];
assign read_byte[3] = ~ read_byte[3];
assign read_byte[4] = ~ read_byte[4];
assign read_byte[5] = ~ read_byte[5];
assign read_byte[6] = ~ read_byte[6];
assign read_byte[7] = ~ read_byte[7];

assign third = offset ~^ false;
assign third = third | third;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[0] & third;
assign read_byte[0] = first | second;

assign vaild_matches = offset;
assign third = offset ~^ false;
assign fourth = ~ third;
assign third = third | third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[1] & third;
assign read_byte[1] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[2] & third;
assign read_byte[2] = first | second;

assign vaild_matches = offset;
assign third = vaild_matches ~^ false;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[3] & third;
assign read_byte[3] = first | second;

assign vaild_matches = offset;
assign third = vaild_matches ~^ false;
assign fourth = ~ third;
assign third = third | third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[4] & third;
assign read_byte[4] = first | second;
assign third = vaild_matches ~^ false;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[5] & third;
assign read_byte[5] = first | second;
assign third = vaild_matches ~^ false;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[6] & third;
assign read_byte[6] = first | second;
assign third = vaild_matches ~^ false;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[7] & third;
assign read_byte[7] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign third = third | third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[8] & third;
assign read_byte[0] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[9] & third;
assign read_byte[1] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[10] & third;
assign read_byte[2] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & zeros_match;
assign third = third | third;
assign first = set_0_line_0_block[11] & third;
assign read_byte[3] = first | second;

assign third = vaild_matches ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[12] & third;
assign read_byte[4] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[13] & third;
assign read_byte[5] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & zeros_match;
assign first = set_0_line_0_block[14] & third;
assign read_byte[6] = first | second;

assign third = vaild_matches ~^ true;
assign fourth = ~ third;
assign first = zeros_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & zeros_match;
assign third = third | third;
assign first = set_0_line_0_block[15] & third;
assign read_byte[7] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third | third;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[0] & third;
assign read_byte[0] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[1] & third;
assign read_byte[1] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[2] & third;
assign read_byte[2] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & zeroone_match;
assign third = third | third;
assign first = set_0_line_1_block[3] & third;
assign read_byte[3] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[4] & third;
assign read_byte[4] = first | second;

assign third = vaild_matches ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[5] & third;
assign read_byte[5] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & zeroone_match;
assign third = third | third;
assign first = set_0_line_1_block[6] & third;
assign read_byte[6] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[7] & third;
assign read_byte[7] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[8] & third;
assign read_byte[0] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[9] & third;
assign read_byte[1] = first | second;

assign third = vaild_matches ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[10] & third;
assign read_byte[2] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[11] & third;
assign read_byte[3] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[12] & third;
assign read_byte[4] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[13] & third;
assign read_byte[5] = first | second;

assign third = vaild_matches ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[14] & third;
assign read_byte[6] = first | second;

assign third = offset ~^ true;
assign fourth = ~ third;
assign first = zeroone_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & zeroone_match;
assign first = set_0_line_1_block[15] & third;
assign read_byte[7] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[0] & third;
assign read_byte[0] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[1] & third;
assign read_byte[1] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[2] & third;
assign read_byte[2] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[3] & third;
assign read_byte[3] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[4] & third;
assign read_byte[4] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[5] & third;
assign read_byte[5] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[6] & third;
assign read_byte[6] = first | second;

assign third = offset ~^ false;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[7] & third;
assign read_byte[7] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[8] & third;
assign read_byte[0] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[9] & third;
assign read_byte[1] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[10] & third;
assign read_byte[2] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[11] & third;
assign read_byte[3] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[12] & third;
assign read_byte[4] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[13] & third;
assign read_byte[5] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[14] & third;
assign read_byte[6] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = onezero_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & onezero_match;
assign first = set_1_line_0_block[15] & third;
assign read_byte[7] = first | second;
assign third = offset ~^ false;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[0] & third;
assign read_byte[0] = first | second;
assign third = offset ~^ false;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[1] & third;
assign read_byte[1] = first | second;
assign third = offset ^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[2] & third;
assign read_byte[2] = first | second;
assign third = offset ^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[3] & third;
assign read_byte[3] = first | second;
assign third = offset ^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[4] & third;
assign read_byte[4] = first | second;
assign third = offset ~^ false;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[5] & third;
assign read_byte[5] = first | second;
assign third = offset ~^ false;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[6] & third;
assign read_byte[6] = first | second;
assign third = offset ~^ false;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[7] & third;
assign read_byte[7] = first | second;
assign read_byte[7] = read_byte[7] & true;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[0] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[8] & third;
assign read_byte[0] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[1] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[9] & third;
assign read_byte[1] = first | second;
assign read_byte[1] = read_byte[1] & true;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[2] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[10] & third;
assign read_byte[2] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[3] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[11] & third;
assign read_byte[3] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[4] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[12] & third;
assign read_byte[4] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[5] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[13] & third;
assign read_byte[5] = first | second;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[6] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[14] & third;
assign read_byte[6] = first | second;
assign read_byte[6] = read_byte[6] & true;
assign third = offset ~^ true;
assign fourth = ~ third;
assign first = ones_valid_match | fourth;
assign second = read_byte[7] & first;
assign third = third & ones_match;
assign first = set_1_line_1_block[15] & third;
assign read_byte[7] = first | second;
assign read_byte[7] = read_byte[7] & true;